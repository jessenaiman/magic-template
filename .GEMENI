AI Agent Task: Refactor Component ShowcaseObjective: Refactor the entire component showcase within the /app/design/ directory to align with the established modern architecture. This involves deleting legacy files, removing redundant layouts, and converting all pages to use the centralized, data-driven PreviewTile pattern.Core Principles (Non-Negotiable)No New Architecture: You MUST NOT introduce new design patterns, contexts, or layouts. The established architecture is final.Adhere to the Gold Standard: The refactored app/design/buttons/html-css/page.tsx is the "gold standard" example. Your output for all other pages must precisely match its structure and patterns.Data-Driven Pattern: All component previews MUST be rendered using data-driven configurations passed to the <PreviewTile /> component. Do not create new wrapper components for each example.Centralized Layout: All pages within a category (e.g., buttons, effects) MUST rely on a single layout.tsx within that category's directory (e.g., app/design/buttons/layout.tsx). This layout must provide the necessary contexts and render the DesignPageHero.Detailed Action PlanStep 1: Delete Obsolete Files and DirectoriesTo break all legacy dependencies, you must first delete the following files and directories. They have been entirely replaced by the new architecture.Legacy Components & Demos:Delete the entire directory: components/common/Delete the entire directory: components/context/Delete the entire directory: components/reactbits-demo/Delete the entire directory: components/setup/Delete the entire directory: components/text/Redundant Preview Controls & Components:Delete: components/preview-controls/preview-surface.tsx (Functionality moved to layouts)Delete: components/preview-controls/page-controls.tsx (Replaced by design-page-hero.tsx)Delete: components/preview-controls/preview-controls-bar.tsxDelete: components/preview-controls/preview-prop-table.tsxDelete: components/preview-controls/preview-refresh-button.tsxDelete: components/design-tabs.tsxDelete: components/design-navigation.tsxDelete: components/design-editor-dialog.tsxDelete: components/design-controls-context.tsxRedundant Page Layouts:For each subdirectory inside app/design/* (e.g., backgrounds, effects, etc.), if a layout.tsx file exists, delete it. The only layout should be at the category level (e.g., app/design/buttons/layout.tsx).Step 2: Refactor All Showcase PagesFor every page.tsx file within the app/design/ subdirectories (e.g., app/design/backgrounds/magicui/page.tsx), you must replace its entire content by precisely following the "gold standard" pattern.The "Gold Standard" Pattern (app/design/buttons/html-css/page.tsx):'use client';

import * as React from 'react';
import { useDesignPage } from '@/components/design-page-context';
import { DesignPageHero } from '@/components/design-page-hero';
import { PreviewTile, PreviewTileProps } from '@/components/preview-tile';
import { FieldConfig } from '@/components/preview-controls/preview-customization-panel';
// Import the actual components being demonstrated...

// 1. Create a PageConfigurator component
function PageConfigurator() {
  const { setTitle, setDescription, setFields } = useDesignPage();

  React.useEffect(() => {
    // 2. Set the title and description for the hero
    setTitle('...');
    setDescription('...');
    
    // 3. Define the shared controls for all tiles on this page
    const fields: FieldConfig[] = [
        // ... field configurations
    ];
    setFields(fields);
  }, [setTitle, setDescription, setFields]);

  return null;
}

// 4. Define a configuration object for EACH example
const exampleOneConfig: PreviewTileProps = {
  title: "...",
  description: "...",
  componentName: "...",
  code: `...`,
  initialCustomization: { /* ... */ },
  customFields: [ /* ... optional fields specific to this tile */ ],
  children: (customization) => <div />, // The live component preview
};

// 5. The default export renders the configurator and the data-driven tiles
export default function Page() {
  return (
    <>
      <PageConfigurator />
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <PreviewTile {...exampleOneConfig} />
        {/* ... more tiles ... */}
      </div>
    </>
  );
}
Task ChecklistPhase 1: Cleanup[ ] 1. Delete Directory: components/common/[ ] 2. Delete Directory: components/context/[ ] 3. Delete Directory: components/reactbits-demo/[ ] 4. Delete Directory: components/setup/[ ] 5. Delete Directory: components/text/[ ] 6. Delete Redundant Files from components/preview-controls/[ ] 7. Delete Redundant Files from components/ (e.g., design-*.tsx)[ ] 8. Delete all nested layout.tsx files within app/design/ sub-categories.Phase 2: Page Refactoring (Follow Gold Standard)[ ] 9. Refactor app/design/backgrounds/animate-ui/page.tsx[ ] 10. Refactor app/design/backgrounds/html-css/page.tsx[ ] 11. Refactor app/design/backgrounds/magicui/page.tsx[ ] 12. Refactor app/design/backgrounds/reactbits/page.tsx[ ] 13. Refactor app/design/backgrounds/tailwind/page.tsx[ ] 14. Refactor app/design/buttons/animate-css/page.tsx[ ] 15. Refactor app/design/buttons/magic/page.tsx[ ] 16. Refactor app/design/buttons/shadcn/page.tsx[ ] 17. Refactor app/design/buttons/tailwind/page.tsx[ ] 18. Refactor app/design/effects/magicui/page.tsx[ ] 19. Refactor app/design/effects/tailwind/page.tsx[ ] 20. Refactor app/design/page-transitions/html-css/page.tsx[ ] 21. Refactor app/design/page-transitions/magicui/page.tsx[ ] 22. Refactor app/design/page-transitions/nextjs/page.tsx[ ] 23. Refactor app/design/page-transitions/tailwind/page.tsx[ ] 24. Refactor app/design/responsive-design/html-css/page.tsx[ ] 25. Refactor app/design/responsive-design/magicui/page.tsx[ ] 26. Refactor app/design/responsive-design/nextjs/page.tsx[ ] 27. Refactor app/design/text/html-css/page.tsx[ ] 28. Refactor app/design/text/magicui/page.tsx[ ] 29. Refactor app/design/text/reactbits/page.tsx[ ] 30. Refactor app/design/text/shadcn/page.tsx[ ] 31. Refactor app/design/text/tailwind/page.tsx